package aca.tools;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import jakarta.xml.bind.DatatypeConverter;

public class Split {
	
	public static void main(String[] args) {
		String xmlSep="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";
		String xmlUm="";
		
		String xmlSep2= "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";
		String xmlUm2="PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPFRpdHVsb0VsZWN0cm9uaWNvIHZlcnNpb249IjEuMCIgZm9saW9Db250cm9sPSIxMDQwNDg3Q0NPTTIwMTAiIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cHM6Ly93d3cuc2lnZWQuc2VwLmdvYi5teC90aXR1bG9zL3NjaGVtYS54c2QiIHhtbG5zPSJodHRwczovL3d3dy5zaWdlZC5zZXAuZ29iLm14L3RpdHVsb3MvIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIj4KICAgIDxGaXJtYVJlc3BvbnNhYmxlcz4KICAgICAgICA8RmlybWFSZXNwb25zYWJsZSBub21icmU9IklTTUFFTCIgcHJpbWVyQXBlbGxpZG89IkNBU1RJTExPIiBzZWd1bmRvQXBlbGxpZG89Ik9TVU5BIiBjdXJwPSJDQU9JNTAxMDAxSFNMU1NTMDAiIGlkQ2FyZ289IjMiIGNhcmdvPSJSRUNUT1IiIGFiclRpdHVsbz0iRFIuIiBzZWxsbz0iTWhKR3VUd3UrQW1RWURlVW1BMmpoNWdYWjV2bVJha29CYlRJWlZKYzFNcUFrK2Zac004V2d6WEFwSDdZcG0xT1QvWEZxZXZ5N1pZVHNIWTFlU2NKaUlpck05WmRnMUFMQ2tlQmFNZXVBZlRvUG9TTGU5bnNMclBDbG5nSlo2TzJVeUJzZWVBSVhnSjZrOUVpMVJqQzh5SENTaFJ1NG9CZG02Mys5Q3pLeS9rM2FoV0RNRUd6WnVFUmFzaFlheGhIRkREYVZmMis5MW1rd1NqNHNvMXF3eVhteGNtRDhZR2JtcWZTWE8zS20rUXNwWTRUV21YQ2dCY1pQMHllVFJOZzB5WmFzU3A1ZkoyeHJBNE9ZaFVBQzR4R0xiNFQ4MHpMNE8yR1dRZUlTVGExOHpaVHcwcW4wNjJkSlRmL0FBYW5zSG5BYUU1OCtLK1lGMzFwUjNocVVnPT0iIGNlcnRpZmljYWRvUmVzcG9uc2FibGU9Ik1JSUdWekNDQkQrZ0F3SUJBZ0lVTURBd01ERXdNREF3TURBME1USXdOakExTXpjd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z2dHeU1UZ3dOZ1lEVlFRRERDOUJMa011SUdSbGJDQlRaWEoyYVdOcGJ5QmtaU0JCWkcxcGJtbHpkSEpoWTJuRHMyNGdWSEpwWW5WMFlYSnBZVEV2TUMwR0ExVUVDZ3dtVTJWeWRtbGphVzhnWkdVZ1FXUnRhVzVwYzNSeVlXTnB3N051SUZSeWFXSjFkR0Z5YVdFeE9EQTJCZ05WQkFzTUwwRmtiV2x1YVhOMGNtRmphY096YmlCa1pTQlRaV2QxY21sa1lXUWdaR1VnYkdFZ1NXNW1iM0p0WVdOcHc3TnVNUjh3SFFZSktvWklodmNOQVFrQkZoQmhZMjlrYzBCellYUXVaMjlpTG0xNE1TWXdKQVlEVlFRSkRCMUJkaTRnU0dsa1lXeG5ieUEzTnl3Z1EyOXNMaUJIZFdWeWNtVnliekVPTUF3R0ExVUVFUXdGTURZek1EQXhDekFKQmdOVkJBWVRBazFZTVJrd0Z3WURWUVFJREJCRWFYTjBjbWwwYnlCR1pXUmxjbUZzTVJRd0VnWURWUVFIREF0RGRXRjFhSFREcVcxdll6RVZNQk1HQTFVRUxSTU1VMEZVT1Rjd056QXhUazR6TVYwd1d3WUpLb1pJaHZjTkFRa0NERTVTWlhOd2IyNXpZV0pzWlRvZ1FXUnRhVzVwYzNSeVlXTnB3N051SUVObGJuUnlZV3dnWkdVZ1UyVnlkbWxqYVc5eklGUnlhV0oxZEdGeWFXOXpJR0ZzSUVOdmJuUnlhV0oxZVdWdWRHVXdIaGNOTVRnd09URXdNVFl5TURVd1doY05Nakl3T1RFd01UWXlNVE13V2pDQnhURWVNQndHQTFVRUF4TVZTVk5OUVVWTUlFTkJVMVJKVEV4UElFOVRWVTVCTVI0d0hBWURWUVFwRXhWSlUwMUJSVXdnUTBGVFZFbE1URThnVDFOVlRrRXhIakFjQmdOVkJBb1RGVWxUVFVGRlRDQkRRVk5VU1V4TVR5QlBVMVZPUVRFTE1Ba0dBMVVFQmhNQ1RWZ3hJVEFmQmdrcWhraUc5dzBCQ1FFV0VtTmhjM1JwYkd4dlFIVnRMbVZrZFM1dGVERVdNQlFHQTFVRUxSTU5RMEZQU1RVd01UQXdNVEZJTVRFYk1Ca0dBMVVFQlJNU1EwRlBTVFV3TVRBd01VaFRURk5UVXpBd01JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBaWllNUV0QXpxRFpERjYrTFhjcXJJV0JJbFRoazdIaEViVjh2aXR4VnIyUDZMaWM1Y1BvTm9wNHhUUnQ2MGFRekl0MDhVQnJVME9MTTVJZ1BQYXJjckltZ0x3Mnd6ODFaaENZYkZrWDFTSjhPcXBRZ2pLSDF4OXVXMyttUkd3aTZxZXFLazROd1lJSCtUUUZDZWIxMnd6cytSNkhGeUhCNFVIcENrcmNueWVaeTRWVnh2RkVCUEFLeEFZaWZvdE9COUNXbGY4b1pBcExSWDgxb2g2WUN4ck42MlRlSkozZk9PdC94SmlKMDl0VFJWbXM4R0FGTGVIRmdxN3hibDdYV2VWL3dNTWdiRTdmRlFBK2kyRXA0Y0JHVkJOdkFsck9MRzJhcWgzNmhiUkU4VnNJOWdFbmxHdGI3Z0pNUlFCSk5Vb0xyWHRwNnlMYUF1YmlCcWhXampRSURBUUFCbzA4d1RUQU1CZ05WSFJNQkFmOEVBakFBTUFzR0ExVWREd1FFQXdJRDJEQVJCZ2xnaGtnQmh2aENBUUVFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd1FHQ0NzR0FRVUZCd01DTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFCTVR4VTVIYTRXWW9TdjVsSHV3UjA5czBuWlVNRGE4M0dreGU1R3cwd2FyTDE3YUxHdE5MeVVlMTgrTGhNbWhlM1NobDVnejQvZkpmUk4zSElSTmx6dDBHV1VKeUIza2txWnZHaVo2amdnbjZ3Q2hQQkcza3hGT0VHaENsVEZOZVgya3BQSHQ2MzRGWXB6Mk1OTURSQ0lEQkpQYmZMNDM1MW5LbmFjeHN4RXZSbm1yWGM3ek1YbmJ1K1pKWU1YSnB2T2pQRjBQOHM5bGRWZkpqNXhGZ1RQd1lkdGg5UmxUa0Rxc0ZUWXRqUWNtamlMQmU0Rk1oeWZjWkVueDJnQUhnT2dycHdSaDJJTG8wYThkSExLZFAxS04rcmErR2JINGNLWVFnaURES0RuMmRIaE9JRWcyckFpY0txUVVzRUorL2JaekJPQ2VCY0lhSHZaT3FhR2xuOEZnUDI4RTZDOVF2QTRPd3VFdFBPakpUcEpQNmdub29SbTk2Nk9KdWxWbHlicGRMcjFoUzgrSGUyTnNodE50QitYWDBMZmlGcXlXZGNVSTdaQ3RyTFNRTFVuR3NpY0lwSUozaEtSV29KeXU2VGpEaW9RdGE0Z0p0SFQ4SXg1WHRhblh4QW9sME1qbHVaZ2hDaEdDQlorZkdxNHJVcUlMOHdWWlROdEJwZFlzQTNRQ01OUHU5V2FrQUxERW9HR29rZWlqNm9KRVNhNFR3R3pweEREU1crRTc4WUpvTTc2a21aY3NUM0ZuUXpRUGV3UGZLMlB0SGRNMTdWVjdJNEJvWjdHRTVGcjBXOTRndDdWalNpM3FFRU5oZU56ZTEvTnhIS1JIS2k2d1ZnMHBqN2J0QlhqNFpONzgySFVvUEZzZW14Z0JNM1BtME1pTWpaV3N4ZUxSQXNmWmc9PSIgbm9DZXJ0aWZpY2Fkb1Jlc3BvbnNhYmxlPSIwMDAwMTAwMDAwMDQxMjA2MDUzNyIvPgogICAgICAgIDxGaXJtYVJlc3BvbnNhYmxlIG5vbWJyZT0iSk9TRSBIRVJNRU5FR0lMRE8iIHByaW1lckFwZWxsaWRvPSJNRU5ERVoiIHNlZ3VuZG9BcGVsbGlkbz0iV0lMU09OIiBjdXJwPSJNRVdINjMwOTA3SFNSTkxSMDgiIGlkQ2FyZ289IjUiIGNhcmdvPSJSRVNQT05TQUJMRSBERSBFWFBFRElDScOTTiIgYWJyVGl0dWxvPSJJTkcuIiBzZWxsbz0iU1hyMlAyKzJnWmJPVmhPeWpxMmhTeFl3SmlBT1gzQlJqOTR1cnpPMXNnSXYxaDBOd0VXTDNKVlo5aUlHQ2V4ckZhbkc4dnR1NDlDRDFkWk5lOWFWa3M3OGQwN2ZHRUlhcEJMSDA2eDFlYm1OU1didndjdjR1eitCVERtNThabXg4ckZKTEpQMmU4a2xXemEzQUExUE0vLys5V0ZobmFCWnlYcG9YbklvT0hRNmpWVEVaMldhVHFlbUtRRHhTVmd2QlF5aGZqUlBHVTRsVzN6TkRGeC9tYk5jSlNKVmJkK0JiRHFHeDREdFB4SStpLzJSQVpqZUU3YkVLbGExWHcrWmV1WjBoZldVVk4yaGxlTXc4UmhJWHlNQm41QU0wTUVCYWtpc05sMGRDNUNMZk15MXN3cGcvVTBseGh5QytHSEFRdUdrZ001bE41bE1QSllqTzdES2NnPT0iIGNlcnRpZmljYWRvUmVzcG9uc2FibGU9Ik1JSUdkRENDQkZ5Z0F3SUJBZ0lVTURBd01ERXdNREF3TURBME1URTJOREl4TkRFd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z2dHeU1UZ3dOZ1lEVlFRRERDOUJMa011SUdSbGJDQlRaWEoyYVdOcGJ5QmtaU0JCWkcxcGJtbHpkSEpoWTJuRHMyNGdWSEpwWW5WMFlYSnBZVEV2TUMwR0ExVUVDZ3dtVTJWeWRtbGphVzhnWkdVZ1FXUnRhVzVwYzNSeVlXTnB3N051SUZSeWFXSjFkR0Z5YVdFeE9EQTJCZ05WQkFzTUwwRmtiV2x1YVhOMGNtRmphY096YmlCa1pTQlRaV2QxY21sa1lXUWdaR1VnYkdFZ1NXNW1iM0p0WVdOcHc3TnVNUjh3SFFZSktvWklodmNOQVFrQkZoQmhZMjlrYzBCellYUXVaMjlpTG0xNE1TWXdKQVlEVlFRSkRCMUJkaTRnU0dsa1lXeG5ieUEzTnl3Z1EyOXNMaUJIZFdWeWNtVnliekVPTUF3R0ExVUVFUXdGTURZek1EQXhDekFKQmdOVkJBWVRBazFZTVJrd0Z3WURWUVFJREJCRWFYTjBjbWwwYnlCR1pXUmxjbUZzTVJRd0VnWURWUVFIREF0RGRXRjFhSFREcVcxdll6RVZNQk1HQTFVRUxSTU1VMEZVT1Rjd056QXhUazR6TVYwd1d3WUpLb1pJaHZjTkFRa0NERTVTWlhOd2IyNXpZV0pzWlRvZ1FXUnRhVzVwYzNSeVlXTnB3N051SUVObGJuUnlZV3dnWkdVZ1UyVnlkbWxqYVc5eklGUnlhV0oxZEdGeWFXOXpJR0ZzSUVOdmJuUnlhV0oxZVdWdWRHVXdIaGNOTVRnd056STJNVFl4TlRFMVdoY05Nakl3TnpJMk1UWXhOVFUxV2pDQjRqRW9NQ1lHQTFVRUF4TWZTazlUUlNCSVJWSk5SVTVGUjBsTVJFOGdUVVZPUkVWYUlGZEpURk5QVGpFb01DWUdBMVVFS1JNZlNrOVRSU0JJUlZKTlJVNUZSMGxNUkU4Z1RVVk9SRVZhSUZkSlRGTlBUakVvTUNZR0ExVUVDaE1mU2s5VFJTQklSVkpOUlU1RlIwbE1SRThnVFVWT1JFVmFJRmRKVEZOUFRqRUxNQWtHQTFVRUJoTUNUVmd4SURBZUJna3Foa2lHOXcwQkNRRVdFV3B0Wlc1a1pYcEFkVzB1WldSMUxtMTRNUll3RkFZRFZRUXRFdzFOUlZkSU5qTXdPVEEzUlUxQk1Sc3dHUVlEVlFRRkV4Sk5SVmRJTmpNd09UQTNTRk5TVGt4U01EZ3dnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDYllIR2V5cWpsNk1yVURWVjVYaXdJNGw1V0pUMTh2U2lvK0JpZGQ2azFjUDJ1ZXpxcWxuWUZWcG90Qk1rWjlYbStUaUtLSllNZlp2WWx0Wk1wUGc5NU5tdkgrNWErZGRRVGw1WkFCOVB4OWRNK2hIMnZJajVuV3hlZUtnbGhnL0NVUjdTLzQxalFwVDk5d3lzNVRUWmp2cjdCSGF5NytiTC9aTUd5Wm5kcldJQlhPOTNVVHVPeG9DZVg1NjF0T2FKMExwOXZnaFhBamFueldJSDRlSjhYU0VqYkl0cnNRVmJoUUI1OWRseXFBaks0OHd2bWZnOENyZDRQMGRhejBGczcxVEkvdHpCcjkraEF4eTNXYUZQb0ZUYkRLaEh2K0ZhUzhIWGxYbHF5a3dkRHFEWGo0T1dZY0pPYW5lMXVMQk1wbTRhZkdibWE1dFN3N3FTMXEwWk5BZ01CQUFHalR6Qk5NQXdHQTFVZEV3RUIvd1FDTUFBd0N3WURWUjBQQkFRREFnUFlNQkVHQ1dDR1NBR0crRUlCQVFRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQkFZSUt3WUJCUVVIQXdJd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFGN3BEVm9zOXpvN21uV1VTdXorUGs1TVZMYmIwSTZ5MU9xREYybTVmUVhOa2Frak9SZWRNbWJTVU5tcVlETEpQdW1HSWY3RWpoVnJPOGVEcGJaWVR3S0NFVFZVMTZRa0NmdlNCMXB0LzlCRDdFTWhsWEhNWGZIYlhlK2hsNkd5TWk5WE44Yko3RkxubnFpa2xSUlVpTDlIbTJvUkRzRDlMYlJHRGpZRGVReWQ1USt5NjI5L2oxVWx2OE5nRkFFQjVaTmMweFBMY2REZ3JhMEd3OW8yUVBRRXdLcFBTWGJxakxOSGdFdndDUHA3NndmQkxDWDZFZi9yWnJOQWFTbHlnV09Eb1RQYkZuODBCekFqcnIyVWpYdDMxWVg5RGpWQXI0ZGk5WG5rNGZBNmxjMmxDMExuS015ai9WQVUvendDb3JYUlFNM0UzVmx2VEdrZXRiYzd0blVjNU9MaURUMVhYQWQrSWY5SUpaVENFc0hVLzJBbzdHOXc4bkZrUVRGNFRmeDZtaHY4VUlzMW9LZE9rSTFZVFBObEpMRWlUQ1h5eVh6aEpNelB3WXRGbG93T21HYUFlMU1oWHBoeWFEci9QbHFabkF2SngvVjI3TnJ6aTVkZTkzRHdEeVRMdXRZeFJGUzJCN2U3Wk9NTTZ0RzFjQmdhK2lqbzhrYStRajFKUWRITGhXaGUrcUtyNzlSQnp0b2JkcmIxZ1k0SVdxRTJvUjdTeW9MMGZNZVVDQmpsdndaK283TGxZL0dpVFR6MFY3NUoreFFrNWR6Q0tSZEo3ZGZqNUJxZktmcWJNdWVINzVuY05JSW9ZWFJSdFhFdUV5NXZHaGZOV1plTWs1K2ZOVmcxYXZ2d1FXTXdhTFdFNVlLdzJmajIxMkpXTTNzOTJDWGhzNVRHWDBQdiIgbm9DZXJ0aWZpY2Fkb1Jlc3BvbnNhYmxlPSIwMDAwMTAwMDAwMDQxMTY0MjE0MSIvPgogICAgPC9GaXJtYVJlc3BvbnNhYmxlcz4KICAgIDxJbnN0aXR1Y2lvbiBjdmVJbnN0aXR1Y2lvbj0iMTkwMTAxIiBub21icmVJbnN0aXR1Y2lvbj0iVU5JVkVSU0lEQUQgREUgTU9OVEVNT1JFTE9TIi8+CiAgICA8Q2FycmVyYSBjdmVDYXJyZXJhPSI3NzEzNDMiIG5vbWJyZUNhcnJlcmE9IkxJQ0VOQ0lBVFVSQSBFTiBDT01VTklDQUNJw5NOIFkgTUVESU9TIiBmZWNoYUluaWNpbz0iMjAwNC0wOC0yNCIgZmVjaGFUZXJtaW5hY2lvbj0iMjAxNi0wNS0yNCIgaWRBdXRvcml6YWNpb25SZWNvbm9jaW1pZW50bz0iMiIgYXV0b3JpemFjaW9uUmVjb25vY2ltaWVudG89IlJWT0UgRVNUQVRBTCIgbnVtZXJvUnZvZT0iTUNETC0gSSAxMjkvMjAxMSIvPgogICAgPFByb2Zlc2lvbmlzdGEgY3VycD0iTUVNRDg2MDQyOU1HUk5MTjAwIiBub21icmU9IkRJQU5BIENPTkNFUENJT04iIHByaW1lckFwZWxsaWRvPSJNRU5ET1pBIiBzZWd1bmRvQXBlbGxpZG89Ik1JTExBTiIgY29ycmVvRWxlY3Ryb25pY289ImV4dG90b2NvcmRlMTdAaG90bWFpbC5jb20iLz4KICAgIDxFeHBlZGljaW9uIGZlY2hhRXhwZWRpY2lvbj0iMjAyMC0wMS0yMyIgaWRNb2RhbGlkYWRUaXR1bGFjaW9uPSI2IiBtb2RhbGlkYWRUaXR1bGFjaW9uPSJPVFJPIiBmZWNoYUV4ZW5jaW9uRXhhbWVuUHJvZmVzaW9uYWw9IjIwMTgtMTItMDMiIGN1bXBsaW9TZXJ2aWNpb1NvY2lhbD0iMSIgaWRGdW5kYW1lbnRvTGVnYWxTZXJ2aWNpb1NvY2lhbD0iMSIgZnVuZGFtZW50b0xlZ2FsU2VydmljaW9Tb2NpYWw9IkFSVC4gNTIgTFJBUlQuIDUgQ09OU1QiIGlkRW50aWRhZEZlZGVyYXRpdmE9IjE5IiBlbnRpZGFkRmVkZXJhdGl2YT0iTlVFVk8gTEXDk04iLz4KICAgIDxBbnRlY2VkZW50ZSBpbnN0aXR1Y2lvblByb2NlZGVuY2lhPSJQUkVQQVJBVE9SSUEgUEFSVElDVUxBUiBJTkNPUlBPUkFEQSAxNiBERSBTRVBUSUVNQlJFIChVQUdSTykiIGlkVGlwb0VzdHVkaW9BbnRlY2VkZW50ZT0iNCIgdGlwb0VzdHVkaW9BbnRlY2VkZW50ZT0iQkFDSElMTEVSQVRPIiBpZEVudGlkYWRGZWRlcmF0aXZhPSIxMiIgZW50aWRhZEZlZGVyYXRpdmE9IkdVRVJSRVJPIiBmZWNoYUluaWNpbz0iMjAwMS0wOC0xNSIgZmVjaGFUZXJtaW5hY2lvbj0iMjAwNC0wNi0xNSIvPgo8L1RpdHVsb0VsZWN0cm9uaWNvPgo=";		
		
		try {
			byte[] tituloDesencriptado = java.util.Base64.getDecoder().decode(xmlSep);
			InputStream is = new ByteArrayInputStream(tituloDesencriptado);
			ZipInputStream zis = new ZipInputStream(is);
			ZipEntry zipEntry = zis.getNextEntry();
			
			FileOutputStream fos = new FileOutputStream(zipEntry.getName());
		    int leido;
		    byte [] bytesSalida = new byte[(int)zipEntry.getSize()];
		    while (0<(leido=zis.read(bytesSalida))){
		       fos.write(bytesSalida,0,leido);
		    }
		    fos.flush();		    
		    fos.close();
		    zis.closeEntry();
		    
			InputStream instream = new FileInputStream(zipEntry.getName());
			byte[] bytesEntrada = new byte[(int)zipEntry.getSize()];
			instream.read(bytesEntrada);
			String xml = new String(bytesEntrada);
			System.out.println(xml);
			instream.close();
			
		    File fileXml = new File(zipEntry.getName());
		    if (fileXml.exists()) {
		    	fileXml.delete();
		    }
		    
		    
		    /*
		    FileOutputStream fos = new FileOutputStream(zipEntry.getName());
		    int leido;
		    byte [] buffer = new byte[(int)zipEntry.getSize()];
		    while (0<(leido=zis.read(buffer))){
		       fos.write(buffer,0,leido);
		       String titulo = new String(buffer);
		       xmlBuilder.append(titulo);
		    }
		    fos.flush();		    
		    System.out.println(xmlBuilder.toString());		        
		    fos.close();
		    zis.closeEntry();
		    */
		     /*   
		        System.out.println(zipEntry.toString()); 
		        BufferedReader br = new BufferedReader(new InputStreamReader(zis));
		        StringBuilder sb = new StringBuilder();
		        String line;

		        while ((line = br.readLine()) != null) {
		            sb.append(line);        //.append('\n');
		        }
		        System.out.println(line);
		        zis.read(xmlBytes);
		        String xmlString = new String(xmlBytes);
		        System.out.println(xmlString);*/
			/*
			FileOutputStream fos = new FileOutputStream("C:\\Trabajo\\xmlSep.xml");	    		
			fos.write(decodedBytes);		
			fos.flush();
			fos.close();
			*/
			//String decoded = DatatypeConverter.printBase64Binary(decodedBytes);
			//String decodedString = new String(decodedBytes);
			//System.out.println("XML:"+decodedString);
		}catch(Exception ex){
			
		}
		
	}

}